
/* //100. Объявите функцию с именем foo.
function foo(){

};

//102. Объявите именнованную функцию foo со входящим параметром x. Обозначьте границы тела функции и границы объявления параметров
function foo(x){

};

//104. Объявите функцию foo, которая возвращает число 42. Обозначьте границы объявления параметров функции.
function foo(){
    return 42
} 

//106. Объявите анонимную не стрелочную функцию. Где у данной функции имя?
//const foo = function(){};

//108. Объявите функцию без имени.
function(){};

//110. Объявите стрелочную функцию. Где у данной функции границы тела и границы объявления параметров?
() => {};

//112. Присвойте переменной f функцию foo. Где у данной функции границы тела? Что находится внутри f?
const f = function(){};

//114. Присвойте переменной f анонимную не стрелочную функцию.
const f = function(){};

//116. Присвойте переменной f стрелочную функцию. Что находится внутри f?
const f = () => {};

//118. Объявите функцию foo со входящим параметром x, которая удваивает то, что ей передали на вход.
 function foo(x){
    return 2*x
 };

 //120. Объявите функцию foo со входящим параметром x, которая удваивает то, что ей передали на вход. Вызовите данную функцию со входящим значением 4. Где у данной функции параметры? А где аргументы? Обозначьте границы тела функции.
 const foo = function(x){
    return 2*x
 };
console.log(foo(4)) 

 //122. Объявите анонимную не стрелочную функцию, которая суммирует два входящих значения. Где у данной функции параметры? Где аргументы?
function foo(x, y){
    return x+y
}
console.log(foo(5, 34)) 

//124. Объявите анонимную самовызывающуюся стрелочную функцию, которая суммирует два входящих значения. Передайте ей на вход 3 и 6. Каков результат выполнения функции? Где у данной функции параметры? Где аргументы?
((a, b) => a+b)(3, 6)  

//126. Объявите функцию foo со входящим параметром x. Вызовите функцию со входящим значением 42. Каков результат выполнения функции? Где у данной функции параметры? Где аргументы? Чему равно x.
function foo(x){
    return console.log(x) 
}
foo(42) 

//128. Объявите функцию foo со входящим параметром x. Вызовите функцию со входящими значениями 42 и 7. Сколько у функции параметров? А сколько аргументов? Чему равен x? Каков результат выполнения функции?
function foo(x){
}
foo(42, 7)
параметр 1 - х 
аргументов 2 - 42 и 7
х равен 42 
результат undefined 

//130. Объявите функцию foo со входящими параметрами x, y. Вызовите функцию со входящим значением 42. Сколько у функции параметров? А сколько аргументов? Чему равен x? Чему равен y? Каков результат выполнения функции?
function foo(x,y){
    return console.log(x,y) 
}
console.log(foo(42))
параметров 2 - x y 
аргументов 1 - 42 
х равен 42 
y равен undefined
результат undefined 

//132. Объявите функцию foo, которая суммирует первые два значения, поданные ей на вход. Вызовите foo со входящими значениями 1, 2, 3. Сколько у функции параметров? А сколько аргументов? Каков результат выполнения функции?
function foo(x, y ){
    return console.log(x+y) 
}
foo(1, 2, 3)
параметров 2 - x y 
аргументов 3 
результат 3 

//Вложенные функции

//200. Объявите функцию foo. Внутри неё объявите функцию bar. Обозначьте границы тела функции foo. Обозначьте границы тела функции bar.
function foo(){
    //тело функции foo
    function bar(){
        //тело функции bar
    }
}

//202. Объявите функцию foo. Внутри неё объявите функцию bar. Внутри bar объявите функцию baz. Обозначьте границы тела функции foo. Обозначьте границы тела функции bar. Обозначьте границы тела функции baz.
function foo(){
    //тело функции foo начало 
    function bar(){
        //тело функции bar начало 
        function baz(){
            //тело функции baz  
        }
        //тело функции bar конец 
    }
    //тело функции foo конец 
}

//204. Объявите функцию foo со входящим параметром a. Внутри неё объявите функцию bar со входящим параметром b. Обозначьте границы параметров функции foo. Обозначьте границы параметров функции bar.
function foo(// начало // a // конец //){
    function bar( // начало // b // конец //){
    }
}


//206. Объявите функцию foo со входящим параметром a. Внутри неё объявите функцию bar со входящим параметром b. Вызовите функцию bar внутри функции foo. Каков результат выполнения функции bar?
function foo(a){
    function bar(b){

    }
    bar()
}

//208. Объявите функцию foo со входящим параметром a. Внутри неё объявите функцию bar со входящим параметром b. Вызовите функцию bar внутри функции foo. Каков результат выполнения функции foo?
function foo(a){
    function bar(b){

    }
    bar();
}
console.log(foo())
//результат undefined

//210. Объявите функцию foo со входящим параметром a. Внутри неё объявите функцию bar со входящим параметром b. Вызовите функцию bar внутри функции foo. Вызовите функцию foo. Каков результат выполнения функции bar? Каков результат выполнения функции foo?
function foo(a){
    function bar(b){

    }
    bar()
}
foo()

bar хер знает там ничего не будет 
foo undefined

//212. Объявите функцию foo со входящим параметром a. Внутри неё объявите функцию bar со входящим параметром b. Функция bar должна удваивать поданное ей на вход значение. Функция foo должна утраивать поданное ей на вход значение. Вызовите foo со входящим значением 2. Каков результат выполнения функции bar? Каков результат выполнения функции foo? Какие параметры у функции foo? Какие параметры у функции bar?
function foo(a){
    function bar(b){
        return 2*b
    }
    return 2*a
}
console.log(foo(2))
результат выполнения функции bar  - нет 
результат выполнения функции foo - 4
параметры у функции foo - а = 2
параметры у функции bar - нету 

//214. Объявите функцию foo со входящим параметром a. Внутри неё объявите функцию bar со входящим параметром b. Функция bar должна удваивать поданное ей на вход значение. Функция foo должна суммировать поданное ей на вход значение с результатом выполнения функции bar, которой на вход передано значение 3. Вызовите foo со входящим значением 4. Каков результат выполнения функции bar? Каков результат выполнения функции foo?
function foo(a){
    function bar(b){
        return 2*b
    }

    return a + bar(3)
}

console.log(foo(4))
зультат выполнения функции bar - 6
результат выполнения функции foo - 10


//216. Объявите функцию foo со входящим параметром a. Внутри неё объявите функцию bar со входящим параметром b. Функция bar должна удваивать поданное ей на вход значение. Функция foo должна суммировать поданное ей на вход значение с результатом выполнения функции bar, которой на вход передано значение, до этого переданное на вход функции foo. Вызовите foo со входящим значением 4. Каков результат выполнения функции bar? Каков результат выполнения функции foo? Какие аргументы у функции foo? Какие аргументы у функции bar?
function foo(a){
    function bar(b){
        return b*2
    }
    return a+bar(a)
}
 console.log(foo(4))
 результат выполнения функции bar - 8
результат выполнения функции foo - 12
аргументы у функции foo - 4
ргументы у функции bar - 4 

//218. Объявите функцию foo. Внутри неё объявите анонимную функцию со входящим параметром. Результатом выполнения foo должен быть результат выполнения анонимной функции. Подайте на вход анонимной функции первый аргумент функции foo. Анонимная функция должна отдавать поданное ей на вход значение без изменений. Вызовите foo со входящим значением 10. Каков результат выполнения функции foo? Какие аргументы у функции foo? Какие аргументы у анонимной функции?

function foo(a){
   
    return  (function(b){
        return b;})(a)
}

console.log(foo(10))
// Результат foo - 10
// Аргументы foo - 10
// Аргументы анонимной функции - 10

//300. Объявите функцию foo. Внутри объявите переменную x со значением 42 и вложенную функцию bar. Внутри функции bar объявите переменную y, которая удваивает значение переменной x. Вызовите функцию bar внутри функции foo. Вызовите foo. Чему равно значение y? Почему?

function foo(){
  const x=42 ;
  function bar(){
    const x=7;
    function baz(){
        return x
    }
    return baz()
  }
  return bar()
}
console.log(foo())

//400. Объявите функцию foo со входящим параметром f. Функция foo должна возвращать результат вызова f как функции. Вызовите foo со входящим значением равным анонимной функции, которая возвращает 42. Каков результат выполнения функции foo? Почему?

function foo(f){
    return f()
}
console.log(foo(function(){return 42})) //это передется в качесве входящего параметра f и выполеяется анонимная функция которая возвращает 42
//pезультат выполнения функции foo  - 42

//402. Объявите функцию foo со входящим параметром wow. Функция foo должна возвращать результат вызова wow как функции. Вызовите foo со входящим значением равным анонимной функции, которая возвращает 42. Каков результат выполнения функции foo? Почему?
function foo(wow){
  return wow()
}
console.log(foo(() => 42))

//404. Объявите функцию foo со входящим параметром f. Функция foo должна возвращать результат вызова f как функции. Объявите функцию bar, которая возвращает 42. Вызовите foo со входящим значением равным функции bar. Каков результат выполнения функции foo? Почему?
function foo(f){
    return f()}
function bar(){
    return 42
}
console.log(foo(bar())) //один ссылается на  друную и вызывает 42

//406. Объявите функцию foo со входящим параметром f. Функция foo должна возвращать результат вызова f как функции. Объявите функцию bar, которая возвращает 42. Вызовите foo со входящим значением равным вызову функции bar. Каков результат выполнения функции foo? Почему?
function foo(f){
    return f()
}
function bar(){
    return 42
}
console.log(foo(bar())) //Ошибка
*/

